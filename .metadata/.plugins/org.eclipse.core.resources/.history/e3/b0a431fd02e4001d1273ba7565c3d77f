package com.learning.travelmanagement.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.learning.travelmanagement.dao.BookingsDAO;
import com.learning.travelmanagement.dao.ClientDAO;
import com.learning.travelmanagement.model.Bookings;
import com.learning.travelmanagement.model.Cab;
import com.learning.travelmanagement.model.Client;
import com.learning.travelmanagement.service.ClientServices;

/*
 * when client makes booking -> client/{clientId}/booking/{cabId} [data in request body]. POST
 * when client edits booking -> client/{clientId}/booking/{cabId} [data in request body]. PUT
 * when client fetches all bookings -> client/{clientId}/bookings. GET
 * when client cancels booking -> client/{clientId}/booking/{bookingId}. DELETE
 * 
 * */


@RestController
@RequestMapping("/client/{clientId}")
public class ClientController {
	
	@Autowired
	private ClientDAO clientDao;
	
	@Autowired
	private ClientServices clientService;
	
	
	
	/************ CLIENT CONTROLLER ************/
	@GetMapping("/bookings")
	@ResponseBody
	public List<Bookings> getBookings(@PathVariable int clientId) {
		List<Bookings> bookingList = clientService.getBookingsByClientId(clientId);
		System.out.println("****** \nThe booking list is : "+bookingList);
		
		return bookingList;
	}
	
	@PostMapping("/booking/{cabId}")
	@ResponseBody
	public Bookings postBooking(@RequestBody Bookings bData, @PathVariable int clientId, @PathVariable int cabId) {
		bData.setClient(new Client(clientId));
		bData.setCab(new Cab(cabId));
		System.out.println("****** \nThe booking data is : "+bData);
		return clientService.addBookingByClientId(bData);
		/*
		 * System.out.println("****** \nThe booking list is : "+bookingList);
		 * 
		 * return bookingList;
		 */
	}
	
	@PutMapping("/booking")
	@ResponseBody
	public Bookings updateBooking(@RequestBody Bookings bData, @PathVariable int clientId) {
		bData.setClient(new Client(clientId));
		System.out.println("****** \nThe booking data is : "+bData);
		return clientService.updateBookingByClientId(bData);
		/*
		 * System.out.println("****** \nThe booking list is : "+bookingList);
		 * 
		 * return bookingList;
		 */
	}
	
	@DeleteMapping("/booking/{bookingId}")
	@ResponseBody
	public void deleteBooking(@RequestBody Bookings bData) {
		System.out.println("****** \nThe booking data is : "+bData);
		clientService.deleteBookingByClientId(bData);
		/*
		 * System.out.println("****** \nThe booking list is : "+bookingList);
		 * 
		 * return bookingList;
		 */
	}
	
	/*
	 * @GetMapping("/client/{clientId}")
	 * 
	 * @ResponseBody public Optional<Client> getClientById(@PathVariable("clientId")
	 * int clientId) { Optional<Client> clientList = clientDao.findById(clientId);
	 * System.out.println("****** \nThe booking list is : "+clientList.toString());
	 * return clientList; }
	 * 
	 * @PostMapping("/client") public Client createClient(@RequestBody Client
	 * clientData) { return clientDao.save(clientData); }
	 * 
	 * @PutMapping("/client/{id}") public Client updateClient(@RequestBody Client
	 * clientData) {
	 * System.out.println("********** \n Client data to be updated is :"+clientData)
	 * ;
	 * 
	 * return clientDao.save(clientData); }
	 * 
	 * @DeleteMapping("/client/{id}") public void deleteClient(@PathVariable("id")
	 * int id) { clientDao.deleteById(id); }
	 */

}
